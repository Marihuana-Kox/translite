import whisper
from deep_translator import GoogleTranslator
import sys
import os

def translate_audio_to_russian(audio_path):
    if not os.path.exists(audio_path):
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
        return

    print("üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (–Ω–µ–º–µ—Ü–∫–∏–π)...")
    model = whisper.load_model("medium")
    # –ß—Ç–æ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–¥–æ –≤ task –æ—Å—Ç–∞–≤–∏—Ç—å transcribe
    result_de = model.transcribe(audio_path, task="transcribe", language="de")
    # –ê —á—Ç–æ –±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å task = translete
    result = model.transcribe(audio_path, task="translate", language="de")
    deutche_text = result_de["text"]
    english_text = result["text"]

    # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    russian_text = GoogleTranslator(source='en', target='ru').translate(english_text)
    # —Å–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    output_path = os.path.splitext(audio_path)[0] + "_translated_ru.txt"
    output_path_de = os.path.splitext(audio_path)[0] + "_deutche.txt"
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(russian_text)

    with open(output_path_de, "w", encoding="utf-8") as f:
        f.write(deutche_text)

    print(f"\n‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_path}")
    print("\nüìÑ –ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n")
    print(deutche_text)
    print(russian_text)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python translate_audio.py –ø—É—Ç—å_–∫_–∞—É–¥–∏–æ—Ñ–∞–π–ª—É.mp3")
    else:
        translate_audio_to_russian(sys.argv[1])
